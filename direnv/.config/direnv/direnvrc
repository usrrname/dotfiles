echo "ðŸš€ Loading global direnvrc..."

# ---- NodeJS nvm ----
# Load NVM based on project context
# 1. If a .nvmrc file exists â‡’ ensure that version is installed & used.
# 2. Else if a package.json exists â‡’ just source NVM so itâ€™s available on-demand.

if [[ -f ".nvmrc" ]]; then
    # Source NVM (first time only per direnv session)
    get-nvm

    NODE_VERSION=$(cat .nvmrc)
    echo "current node version: $(nvm current)"

    # Install the requested Node version if it isnâ€™t installed yet
    if ! nvm ls "$NODE_VERSION" > /dev/null 2>&1; then
        echo "installing node version: $NODE_VERSION â€¦"
        nvm install "$NODE_VERSION"
    fi

    echo "using node version: $NODE_VERSION"
    nvm use "$NODE_VERSION"

elif [[ -f "package.json" ]]; then
    # No .nvmrc, but JavaScript project detected â†’ just source NVM for convenience
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
    echo "âœ¨ NVM sourced due to package.json (no .nvmrc found)."
fi


# Auto-source dotfiles .envrc in every directory if not inside dotfiles directory
# or it will load twice
if [[ $PWD != "$HOME/.dotfiles" && -f .git ]]; then
    dotenv_if_exists
    source_env_if_exists "$HOME/.dotfiles/.envrc"
    source_env_if_exists "$HOME/.dotfiles/.env.secret" 
fi

# Suppress direnv export output
export DIRENV_LOG_FORMAT=""

# php composer
if [[ -f composer.json ]]; then
    PATH_add vendor/bin
fi